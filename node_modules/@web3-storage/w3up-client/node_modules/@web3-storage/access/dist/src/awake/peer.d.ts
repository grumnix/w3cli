export class Peer {
    /**
     * @param {{
     * channel: import('./types').Channel
     * agent: import('../agent').Agent
     * }} opts
     */
    constructor(opts: {
        channel: import('./types').Channel;
        agent: import('../agent').Agent;
    });
    channel: import("./types").Channel;
    agent: import("../agent").Agent;
    did: `did:key:${string}`;
    challenge: string | undefined;
    nextdid: UCAN.Principal<`did:${string}:${string}`> | UCAN.PrincipalView<any> | undefined;
    audience: UCAN.PrincipalView<`did:${string}:${string}`> | undefined;
    pin: number;
    /**
     * Bootstrap `awake/init`, receive `awake/res` and send challenge to Responder
     *
     * @param {import('@ipld/dag-ucan').Capabilities} caps
     */
    bootstrap(caps: import('@ipld/dag-ucan').Capabilities): Promise<string | undefined>;
    awaitBootstrap(): Promise<void>;
    /**
     * Acknowledgment for the PIN challenge
     *
     * @param {string} pin
     */
    ack(pin: string): Promise<void>;
    awaitAck(): Promise<void>;
    /**
     *
     * @param {{
     * caps: import('./types').LinkRequest['msg']['caps']
     * meta: import('./types').PeerMeta
     * }} opts
     */
    link(opts: {
        caps: import('./types').LinkRequest['msg']['caps'];
        meta: import('./types').PeerMeta;
    }): Promise<{
        delegation: import("@ucanto/interface").Delegation<UCAN.Capabilities>;
        meta: import("./types").PeerMeta;
    }>;
    awaitLink(): Promise<void>;
    /**
     * Build pin signature and send it
     *
     * @private
     */
    private sendPinSignature;
}
import * as UCAN from "@ipld/dag-ucan/.";
//# sourceMappingURL=peer.d.ts.map