/**
 * @param {Partial<{
 * access: Partial<import('@web3-storage/access/types').Service['access']>
 * provider: Partial<import('@web3-storage/access/types').Service['provider']>
 * store: Partial<import('@web3-storage/upload-client/types').Service['store']>
 * upload: Partial<import('@web3-storage/upload-client/types').Service['upload']>
 * voucher: Partial<import('@web3-storage/access/types').Service['voucher']>
 * space: Partial<import('@web3-storage/access/types').Service['space']>
 * }>} impl
 */
export function mockService(impl: Partial<{
    access: Partial<import('@web3-storage/access/types').Service['access']>;
    provider: Partial<import('@web3-storage/access/types').Service['provider']>;
    store: Partial<import('@web3-storage/upload-client/types').Service['store']>;
    upload: Partial<import('@web3-storage/upload-client/types').Service['upload']>;
    voucher: Partial<import('@web3-storage/access/types').Service['voucher']>;
    space: Partial<import('@web3-storage/access/types').Service['space']>;
}>): {
    store: {
        add: {
            (input: Server.Invocation<{
                can: "store/add";
                with: `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    link: Server.API.Link<unknown, number, number, 0 | 1>;
                    size: number & Server.API.Phantom<{
                        typeof: "integer";
                    }>;
                    origin: Server.API.Link<unknown, number, number, 0 | 1> | undefined;
                }, "link" | "size"> & Partial<Pick<{
                    link: Server.API.Link<unknown, number, number, 0 | 1>;
                    size: number & Server.API.Phantom<{
                        typeof: "integer";
                    }>;
                    origin: Server.API.Link<unknown, number, number, 0 | 1> | undefined;
                }, "origin">>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
        list: {
            (input: Server.Invocation<{
                can: "store/list";
                with: `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    cursor: string | undefined;
                    size: (number & Server.API.Phantom<{
                        typeof: "integer";
                    }>) | undefined;
                    pre: boolean | undefined;
                }, never> & Partial<Pick<{
                    cursor: string | undefined;
                    size: (number & Server.API.Phantom<{
                        typeof: "integer";
                    }>) | undefined;
                    pre: boolean | undefined;
                }, "size" | "cursor" | "pre">>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
        remove: {
            (input: Server.Invocation<{
                can: "store/remove";
                with: `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    link: Server.API.Link<unknown, number, number, 0 | 1>;
                }, "link"> & Partial<Pick<{
                    link: Server.API.Link<unknown, number, number, 0 | 1>;
                }, never>>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
    };
    upload: {
        add: {
            (input: Server.Invocation<{
                can: "upload/add";
                with: `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    root: Server.API.Link<unknown, number, number, 0 | 1>;
                    shards: Server.API.Link<unknown, 514, number, 1>[] | undefined;
                }, "root"> & Partial<Pick<{
                    root: Server.API.Link<unknown, number, number, 0 | 1>;
                    shards: Server.API.Link<unknown, 514, number, 1>[] | undefined;
                }, "shards">>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
        list: {
            (input: Server.Invocation<{
                can: "upload/list";
                with: `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    cursor: string | undefined;
                    size: (number & Server.API.Phantom<{
                        typeof: "integer";
                    }>) | undefined;
                    pre: boolean | undefined;
                }, never> & Partial<Pick<{
                    cursor: string | undefined;
                    size: (number & Server.API.Phantom<{
                        typeof: "integer";
                    }>) | undefined;
                    pre: boolean | undefined;
                }, "size" | "cursor" | "pre">>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
        remove: {
            (input: Server.Invocation<{
                can: "upload/remove";
                with: `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    root: Server.API.Link<unknown, number, number, 0 | 1>;
                }, "root"> & Partial<Pick<{
                    root: Server.API.Link<unknown, number, number, 0 | 1>;
                }, never>>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
    };
    space: {
        info: {
            (input: Server.Invocation<{
                can: "space/info";
                with: `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
        'recover-validation': {
            (input: Server.Invocation<{
                can: "space/recover-validation";
                with: `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    identity: Server.API.URI<"mailto:">;
                }, "identity"> & Partial<Pick<{
                    identity: Server.API.URI<"mailto:">;
                }, never>>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
    };
    access: {
        claim: {
            (input: Server.Invocation<{
                can: "access/claim";
                with: ((`did:mailto:${string}` & `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }>) | (`did:key:${string}` & `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }>)) & `${string}:${string}`;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
        authorize: {
            (input: Server.Invocation<{
                can: "access/authorize";
                with: `did:key:${string}` & `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    iss: `did:mailto:${string}` & `did:${string}` & Server.API.Phantom<{
                        protocol: "did:";
                    }>;
                    att: import("../../../capabilities/node_modules/@ucanto/validator/dist/src/schema").InferStruct<{
                        can: import("../../../capabilities/node_modules/@ucanto/validator/dist/src/schema").StringSchema<string, unknown>;
                    }>[];
                }, "att" | "iss"> & Partial<Pick<{
                    iss: `did:mailto:${string}` & `did:${string}` & Server.API.Phantom<{
                        protocol: "did:";
                    }>;
                    att: import("../../../capabilities/node_modules/@ucanto/validator/dist/src/schema").InferStruct<{
                        can: import("../../../capabilities/node_modules/@ucanto/validator/dist/src/schema").StringSchema<string, unknown>;
                    }>[];
                }, never>>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
        delegate: {
            (input: Server.Invocation<{
                can: "access/delegate";
                with: `did:key:${string}` & `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    delegations: import("@web3-storage/capabilities/access").AccessDelegateDelegations;
                }, "delegations"> & Partial<Pick<{
                    delegations: import("@web3-storage/capabilities/access").AccessDelegateDelegations;
                }, never>>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
    };
    provider: {
        add: {
            (input: Server.Invocation<{
                can: "provider/add";
                with: `did:mailto:${string}` & `did:${string}` & Server.API.Phantom<{
                    protocol: "did:";
                }> & `${string}:${string}`;
                nb: Pick<{
                    provider: `did:web:${string}` & `did:${string}` & Server.API.Phantom<{
                        protocol: "did:";
                    }>;
                    consumer: `did:key:${string}` & `did:${string}` & Server.API.Phantom<{
                        protocol: "did:";
                    }>;
                }, "provider" | "consumer"> & Partial<Pick<{
                    provider: `did:web:${string}` & `did:${string}` & Server.API.Phantom<{
                        protocol: "did:";
                    }>;
                    consumer: `did:key:${string}` & `did:${string}` & Server.API.Phantom<{
                        protocol: "did:";
                    }>;
                }, never>>;
            }>, context: Server.InvocationContext): any;
            called: boolean;
            callCount: number;
        };
    };
};
/**
 * @template {string} K
 * @template {Record<K, any>} Service - describes methods exposed via ucanto server
 * @param {import('@ucanto/interface').ServerView<Service>} server
 */
export function mockServiceConf<K extends string, Service extends Record<K, any>>(server: Server.ServerView<Service>): Promise<{
    access: Server.ConnectionView<Service>;
    upload: Server.ConnectionView<Service>;
}>;
import * as Server from "@ucanto/server";
//# sourceMappingURL=mocks.d.ts.map