export class Client extends Base {
    capability: {
        access: AccessClient;
        store: StoreClient;
        upload: UploadClient;
        space: SpaceClient;
    };
    /**
     * Authorize the current agent to use capabilities granted to the passed
     * email account.
     *
     * @param {`${string}@${string}`} email
     * @param {object} [options]
     * @param {AbortSignal} [options.signal]
     * @param {Iterable<{ can: import('./types').Ability }>} [options.capabilities]
     */
    authorize(email: `${string}@${string}`, options?: {
        signal?: AbortSignal | undefined;
        capabilities?: Iterable<{
            can: import('./types').Ability;
        }> | undefined;
    } | undefined): Promise<void>;
    /**
     * Uploads a file to the service and returns the root data CID for the
     * generated DAG.
     *
     * @param {import('./types').BlobLike} file - File data.
     * @param {import('./types').UploadOptions} [options]
     */
    uploadFile(file: import('./types').BlobLike, options?: import("@web3-storage/upload-client/types").UploadOptions | undefined): Promise<import("@web3-storage/upload-client/types").AnyLink>;
    /**
     * Uploads a directory of files to the service and returns the root data CID
     * for the generated DAG. All files are added to a container directory, with
     * paths in file names preserved.
     *
     * @param {import('./types').FileLike[]} files - File data.
     * @param {import('./types').UploadDirectoryOptions} [options]
     */
    uploadDirectory(files: import('./types').FileLike[], options?: import("@web3-storage/upload-client/types").UploadDirectoryOptions | undefined): Promise<import("@web3-storage/upload-client/types").AnyLink>;
    /**
     * Uploads a CAR file to the service.
     *
     * The difference between this function and `capability.store.add` is that the
     * CAR file is automatically sharded and an "upload" is registered, linking
     * the individual shards (see `capability.upload.add`).
     *
     * Use the `onShardStored` callback to obtain the CIDs of the CAR file shards.
     *
     * @param {import('./types').BlobLike} car - CAR file.
     * @param {import('./types').UploadOptions} [options]
     */
    uploadCAR(car: import('./types').BlobLike, options?: import("@web3-storage/upload-client/types").UploadOptions | undefined): Promise<import("@web3-storage/upload-client/types").AnyLink>;
    /**
     * Return the default provider.
     */
    defaultProvider(): `did:${string}:${string}`;
    /**
     * The current user agent (this device).
     */
    agent(): import("@ucanto/interface").Signer<`did:key:${string}`, import("@ucanto/interface").SigAlg>;
    /**
     * The current space.
     */
    currentSpace(): Space | undefined;
    /**
     * Use a specific space.
     *
     * @param {import('./types').DID} did
     */
    setCurrentSpace(did: import('./types').DID): Promise<void>;
    /**
     * Spaces available to this agent.
     */
    spaces(): Space[];
    /**
     * Create a new space with an optional name.
     *
     * @param {string} [name]
     */
    createSpace(name?: string | undefined): Promise<Space>;
    /**
     * Register the _current_ space with the service.
     *
     * @param {string} email
     * @param {object} [options]
     * @param {import('./types').DID<'web'>} [options.provider]
     * @param {AbortSignal} [options.signal]
     */
    registerSpace(email: string, options?: {
        provider?: `did:web:${string}` | undefined;
        signal?: AbortSignal | undefined;
    } | undefined): Promise<void>;
    /**
     * Add a space from a received proof.
     *
     * @param {import('./types').Delegation} proof
     */
    addSpace(proof: import('./types').Delegation): Promise<Space>;
    /**
     * Get all the proofs matching the capabilities.
     *
     * Proofs are delegations with an _audience_ matching the agent DID.
     *
     * @param {import('./types').Capability[]} [caps] - Capabilities to
     * filter by. Empty or undefined caps with return all the proofs.
     */
    proofs(caps?: import("@ipld/dag-ucan/dist/src/ucan.js").Capability<import("@ipld/dag-ucan/dist/src/ucan.js").Ability, `${string}:${string}`, any>[] | undefined): import("@ucanto/interface").Delegation<import("@ipld/dag-ucan/dist/src/ucan.js").Capabilities>[];
    /**
     * Add a proof to the agent. Proofs are delegations with an _audience_
     * matching the agent DID.
     *
     * @param {import('./types').Delegation} proof
     */
    addProof(proof: import('./types').Delegation): Promise<void>;
    /**
     * Get delegations created by the agent for others.
     *
     * @param {import('./types').Capability[]} [caps] - Capabilities to
     * filter by. Empty or undefined caps with return all the delegations.
     */
    delegations(caps?: import("@ipld/dag-ucan/dist/src/ucan.js").Capability<import("@ipld/dag-ucan/dist/src/ucan.js").Ability, `${string}:${string}`, any>[] | undefined): AgentDelegation<import("@ipld/dag-ucan/dist/src/ucan.js").Capabilities>[];
    /**
     * Create a delegation to the passed audience for the given abilities with
     * the _current_ space as the resource.
     *
     * @param {import('./types').Principal} audience
     * @param {import('./types').Abilities[]} abilities
     * @param {Omit<import('./types').UCANOptions, 'audience'> & { audienceMeta?: import('./types').AgentMeta }} [options]
     */
    createDelegation(audience: import('./types').Principal, abilities: import('./types').Abilities[], options?: (Omit<import("@ucanto/interface").UCANOptions, "audience"> & {
        audienceMeta?: import("@web3-storage/access/types").AgentMeta | undefined;
    }) | undefined): Promise<AgentDelegation<import("@ipld/dag-ucan/dist/src/ucan.js").Capabilities>>;
}
import { Base } from "./base.js";
import { Space } from "./space.js";
import { Delegation as AgentDelegation } from "./delegation.js";
//# sourceMappingURL=client.d.ts.map