/**
 * Client for interacting with the `upload/*` capabilities.
 */
export class UploadClient extends Base {
    /**
     * Register an "upload" to the resource.
     *
     * @param {import('../types').UnknownLink} root - Root data CID for the DAG that was stored.
     * @param {import('../types').CARLink[]} shards - CIDs of CAR files that contain the DAG.
     * @param {import('../types').RequestOptions} [options]
     */
    add(root: import('../types').UnknownLink, shards: import('../types').CARLink[], options?: import("@web3-storage/upload-client/types").RequestOptions | undefined): Promise<import("@web3-storage/upload-client/types").UploadAddResponse>;
    /**
     * List uploads registered to the resource.
     *
     * @param {import('../types').ListRequestOptions} [options]
     */
    list(options?: import("@web3-storage/upload-client/types").ListRequestOptions | undefined): Promise<import("@web3-storage/upload-client/types").ListResponse<import("@web3-storage/upload-client/types").UploadListResult>>;
    /**
     * Remove an upload by root data CID.
     *
     * @param {import('../types').UnknownLink} root - Root data CID to remove.
     * @param {import('../types').RequestOptions} [options]
     */
    remove(root: import('../types').UnknownLink, options?: import("@web3-storage/upload-client/types").RequestOptions | undefined): Promise<(import("@web3-storage/upload-client/types").UploadRemoveResponse & {
        error?: undefined;
    }) | undefined>;
}
import { Base } from "../base.js";
//# sourceMappingURL=upload.d.ts.map