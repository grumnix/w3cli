/**
 * Store a DAG encoded as a CAR file. The issuer needs the `store/add`
 * delegated capability.
 *
 * Required delegated capability proofs: `store/add`
 *
 * @param {import('./types').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `store/add` delegated capability.
 * @param {Blob} car CAR file data.
 * @param {import('./types').RequestOptions} [options]
 * @returns {Promise<import('./types').CARLink>}
 */
export function add({ issuer, with: resource, proofs, audience }: import('./types').InvocationConfig, car: Blob, options?: import("./types").RequestOptions | undefined): Promise<import('./types').CARLink>;
/**
 * List CAR files stored by the issuer.
 *
 * @param {import('./types').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `store/list` delegated capability.
 * @param {import('./types').ListRequestOptions} [options]
 * @returns {Promise<import('./types').ListResponse<import('./types').StoreListResult>>}
 */
export function list({ issuer, with: resource, proofs, audience }: import('./types').InvocationConfig, options?: import("./types").ListRequestOptions | undefined): Promise<import('./types').ListResponse<import('./types').StoreListResult>>;
/**
 * Remove a stored CAR file by CAR CID.
 *
 * @param {import('./types').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `store/remove` delegated capability.
 * @param {import('./types').CARLink} link CID of CAR file to remove.
 * @param {import('./types').RequestOptions} [options]
 */
export function remove({ issuer, with: resource, proofs, audience }: import('./types').InvocationConfig, link: import('./types').CARLink, options?: import("./types").RequestOptions | undefined): Promise<void>;
//# sourceMappingURL=store.d.ts.map