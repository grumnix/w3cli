/**
 * Uploads a file to the service and returns the root data CID for the
 * generated DAG.
 *
 * Required delegated capability proofs: `store/add`, `upload/add`
 *
 * @param {import('./types').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `store/add` and `upload/add` delegated capability.
 * @param {import('./types').BlobLike} file File data.
 * @param {import('./types').UploadOptions} [options]
 */
export function uploadFile(conf: import('./types').InvocationConfig, file: import('./types').BlobLike, options?: import("./types").UploadOptions | undefined): Promise<import("./types").AnyLink>;
/**
 * Uploads a directory of files to the service and returns the root data CID
 * for the generated DAG. All files are added to a container directory, with
 * paths in file names preserved.
 *
 * Required delegated capability proofs: `store/add`, `upload/add`
 *
 * @param {import('./types').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `store/add` and `upload/add` delegated capability.
 * @param {import('./types').FileLike[]} files File data.
 * @param {import('./types').UploadDirectoryOptions} [options]
 */
export function uploadDirectory(conf: import('./types').InvocationConfig, files: import('./types').FileLike[], options?: import("./types").UploadDirectoryOptions | undefined): Promise<import("./types").AnyLink>;
/**
 * Uploads a CAR file to the service.
 *
 * The difference between this function and `Store.add` is that the CAR file is
 * automatically sharded and an "upload" is registered, linking the individual
 * shards (see `Upload.add`).
 *
 * Use the `onShardStored` callback to obtain the CIDs of the CAR file shards.
 *
 * Required delegated capability proofs: `store/add`, `upload/add`
 *
 * @param {import('./types').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `store/add` and `upload/add` delegated capability.
 * @param {import('./types').BlobLike} car CAR file.
 * @param {import('./types').UploadOptions} [options]
 */
export function uploadCAR(conf: import('./types').InvocationConfig, car: import('./types').BlobLike, options?: import("./types").UploadOptions | undefined): Promise<import("./types").AnyLink>;
export * from "./sharding.js";
import * as Store from "./store.js";
import * as Upload from "./upload.js";
import * as UnixFS from "./unixfs.js";
import * as CAR from "./car.js";
export { Store, Upload, UnixFS, CAR };
//# sourceMappingURL=index.d.ts.map