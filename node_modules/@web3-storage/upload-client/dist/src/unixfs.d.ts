/**
 * @param {import('./types').BlobLike} blob
 * @returns {Promise<import('./types').UnixFSEncodeResult>}
 */
export function encodeFile(blob: import('./types').BlobLike): Promise<import('./types').UnixFSEncodeResult>;
/**
 * @param {import('./types').BlobLike} blob
 * @returns {ReadableStream<import('@ipld/unixfs').Block>}
 */
export function createFileEncoderStream(blob: import('./types').BlobLike): ReadableStream<import('@ipld/unixfs').Block>;
/**
 * @param {Iterable<import('./types').FileLike>} files
 * @param {import('./types').UnixFSDirectoryEncoderOptions} [options]
 * @returns {Promise<import('./types').UnixFSEncodeResult>}
 */
export function encodeDirectory(files: Iterable<import('./types').FileLike>, options?: import("./types").UnixFSDirectoryEncoderOptions | undefined): Promise<import('./types').UnixFSEncodeResult>;
/**
 * @param {Iterable<import('./types').FileLike>} files
 * @param {import('./types').UnixFSDirectoryEncoderOptions} [options]
 * @returns {ReadableStream<import('@ipld/unixfs').Block>}
 */
export function createDirectoryEncoderStream(files: Iterable<import('./types').FileLike>, options?: import("./types").UnixFSDirectoryEncoderOptions | undefined): ReadableStream<import('@ipld/unixfs').Block>;
//# sourceMappingURL=unixfs.d.ts.map