/**
 * @typedef {import('@ipld/unixfs').Block} Block
 */
/**
 * @param {Iterable<Block> | AsyncIterable<Block>} blocks
 * @param {import('./types').AnyLink} [root]
 * @returns {Promise<import('./types').CARFile>}
 */
export function encode(blocks: Iterable<Block> | AsyncIterable<Block>, root?: import("./types").AnyLink | undefined): Promise<import('./types').CARFile>;
/** @extends {ReadableStream<Block>} */
export class BlockStream extends ReadableStream<import("@ipld/unixfs/src/unixfs").Block<any, number, number, import("@ipld/dag-ucan/.").LinkVersion>> {
    /** @param {import('./types').BlobLike} car */
    constructor(car: import('./types').BlobLike);
    /** @returns {Promise<import('./types').AnyLink[]>} */
    getRoots: () => Promise<import('./types').AnyLink[]>;
}
export type Block = import('@ipld/unixfs').Block;
//# sourceMappingURL=car.d.ts.map