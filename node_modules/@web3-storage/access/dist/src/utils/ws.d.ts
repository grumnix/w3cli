/**
 * @template [T=unknown]
 * @typedef {(event: T) => void} Handler
 */
/**
 * @template [T=unknown]
 * @typedef {Array<Handler<T>> } EventHandlerList
 */
/**
 * @template {Record<string, unknown>} [Events=Record<string, unknown>]
 * @typedef {Map<keyof Events, EventHandlerList<Events[keyof Events]>>} EventHandlerMap
 */
export class Websocket {
    /**
     * @param {URL} host
     * @param {string} topic
     */
    constructor(host: URL, topic: string);
    url: URL;
    ws: WS | undefined;
    attemps: number;
    onMessage: any;
    /**
     * @type {string | number | NodeJS.Timeout | undefined}
     */
    timeout: string | number | NodeJS.Timeout | undefined;
    forceClose: boolean;
    /**
     * @param {object} [opts]
     * @param {AbortSignal} [opts.signal]
     */
    open(opts?: {
        signal?: AbortSignal | undefined;
    } | undefined): Promise<Websocket>;
    connect(): WS | undefined;
    /**
     * @param {number} [code]
     * @param {string | Buffer } [reason]
     */
    close(code?: number | undefined, reason?: string | Buffer | undefined): Promise<Websocket>;
    /**
     * @param {any} data
     */
    send(data: any): void;
    /**
     * @param {string} type
     * @param { Handler } fn
     * @param {boolean} [once]
     */
    subscribe(type: string, fn: Handler<unknown>, once?: boolean | undefined): () => void;
    /**
     * @param {string} type
     * @param { Handler } fn
     */
    unsubscribe(type: string, fn: Handler<unknown>): void;
    /**
     *
     * @param {unknown} data
     */
    publish(data: unknown): void;
    /**
     *
     * @param {object} [opts]
     * @param {AbortSignal} [opts.signal]
     */
    awaitMsg(opts?: {
        signal?: AbortSignal | undefined;
    } | undefined): Promise<any>;
    #private;
}
export class AbortError extends Error {
    /**
     * @param {string} message
     * @param {ErrorOptions} [opts]
     */
    constructor(message: string, opts?: ErrorOptions | undefined);
    code: string;
}
export namespace AbortError {
    const code: string;
}
export type Handler<T = unknown> = (event: T) => void;
export type EventHandlerList<T = unknown> = Array<Handler<T>>;
export type EventHandlerMap<Events extends Record<string, unknown> = Record<string, unknown>> = Map<keyof Events, EventHandlerList<Events[keyof Events]>>;
import WS from "isomorphic-ws";
//# sourceMappingURL=ws.d.ts.map