/**
 * Get a map from CIDs to the session proofs that reference them
 *
 * @param {AgentData} data
 * @returns {Record<string, Ucanto.Delegation>}
 */
export function getSessionProofs(data: AgentData): Record<string, Ucanto.Delegation>;
/** @typedef {import('./types').AgentDataModel} AgentDataModel */
/** @implements {AgentDataModel} */
export class AgentData implements AgentDataModel {
    /**
     * Create a new AgentData instance from the passed initialization data.
     *
     * @param {Partial<import('./types').AgentDataModel>} [init]
     * @param {import('./types').AgentDataOptions} [options]
     */
    static create(init?: Partial<import("./types").AgentDataModel> | undefined, options?: import("./types").AgentDataOptions | undefined): Promise<AgentData>;
    /**
     * Instantiate AgentData from previously exported data.
     *
     * @param {import('./types').AgentDataExport} raw
     * @param {import('./types').AgentDataOptions} [options]
     */
    static fromExport(raw: import('./types').AgentDataExport, options?: import("./types").AgentDataOptions | undefined): AgentData;
    /**
     * @param {import('./types').AgentDataModel} data
     * @param {import('./types').AgentDataOptions} [options]
     */
    constructor(data: import('./types').AgentDataModel, options?: import("./types").AgentDataOptions | undefined);
    meta: import("./types").AgentMeta;
    principal: EdSigner.Signer<`did:key:${string}`, EdSigner.UCAN.SigAlg>;
    spaces: Map<`did:${string}:${string}`, import("./types").SpaceMeta>;
    delegations: Map<string, {
        meta: import("./types").DelegationMeta;
        delegation: EdSigner.Delegation<EdSigner.Capabilities>;
    }>;
    currentSpace: `did:key:${string}` | undefined;
    /**
     * Export data in a format safe to pass to `structuredClone()`.
     */
    export(): import("./types").AgentDataExport;
    /**
     * @deprecated
     * @param {import('@ucanto/interface').DID} did
     * @param {import('./types').SpaceMeta} meta
     * @param {import('@ucanto/interface').Delegation} [proof]
     */
    addSpace(did: import('@ucanto/interface').DID, meta: import('./types').SpaceMeta, proof?: EdSigner.Delegation<EdSigner.Capabilities> | undefined): Promise<void>;
    /**
     * @deprecated
     * @param {import('@ucanto/interface').DID<'key'>} did
     */
    setCurrentSpace(did: import('@ucanto/interface').DID<'key'>): Promise<void>;
    /**
     * @param {import('@ucanto/interface').Delegation} delegation
     * @param {import('./types').DelegationMeta} [meta]
     */
    addDelegation(delegation: import('@ucanto/interface').Delegation, meta?: import("./types").DelegationMeta | undefined): Promise<void>;
    /**
     * @param {import('@ucanto/interface').UCANLink} cid
     */
    removeDelegation(cid: import('@ucanto/interface').UCANLink): Promise<void>;
    #private;
}
export function isSessionProof(delegation: Ucanto.Delegation): delegation is EdSigner.Delegation<[{
    can: "ucan/attest";
    with: `did:${string}` & EdSigner.Phantom<{
        protocol: "did:";
    }> & `${string}:${string}`;
    nb: Pick<{
        proof: EdSigner.Link<unknown, number, number, 0 | 1>;
    }, "proof"> & Partial<Pick<{
        proof: EdSigner.Link<unknown, number, number, 0 | 1>;
    }, never>>;
}]>;
export type AgentDataModel = import('./types').AgentDataModel;
import * as Ucanto from "@ucanto/interface";
import { Signer as EdSigner } from "@ucanto/principal/ed25519";
//# sourceMappingURL=agent-data.d.ts.map