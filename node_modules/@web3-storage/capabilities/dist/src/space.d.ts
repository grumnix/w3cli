export { top } from "./top.js";
export { Store };
export const space: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"space/*", import("@ucanto/interface").URI<"did:">, any>>;
/**
 * `space/info` can be derived from any of the `store/*`
 * capability that has matching `with`. This allows store service
 * to identify account based on any user request.
 */
export const info: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").DerivedMatch<import("@ucanto/interface").ParsedCapability<"space/info", import("@ucanto/interface").URI<"did:">, {}>, import("@ucanto/interface").CapabilityMatch<"store/add", import("@ucanto/interface").URI<"did:">, Store.Schema.InferStruct<{
    link: typeof Store.Schema.Link;
    size: Store.Schema.NumberSchema<number & import("@ucanto/interface").Phantom<{
        typeof: "integer";
    }>, unknown>;
    origin: Store.Schema.Schema<import("@ucanto/interface").Link<unknown, number, number, 0 | 1> | undefined, unknown>;
}>> | import("@ucanto/interface").CapabilityMatch<"store/remove", import("@ucanto/interface").URI<"did:">, Store.Schema.InferStruct<{
    link: typeof Store.Schema.Link;
}>> | import("@ucanto/interface").CapabilityMatch<"store/list", import("@ucanto/interface").URI<"did:">, Store.Schema.InferStruct<{
    cursor: Store.Schema.Schema<string | undefined, unknown>;
    size: Store.Schema.Schema<(number & import("@ucanto/interface").Phantom<{
        typeof: "integer";
    }>) | undefined, unknown>;
    pre: Store.Schema.Schema<boolean | undefined, unknown>;
}>> | import("@ucanto/interface").CapabilityMatch<"upload/add", import("@ucanto/interface").URI<"did:">, Store.Schema.InferStruct<{
    root: typeof Store.Schema.Link;
    shards: Store.Schema.Schema<import("@ucanto/interface").Link<unknown, 514, number, 1>[] | undefined, any>;
}>> | import("@ucanto/interface").CapabilityMatch<"upload/remove", import("@ucanto/interface").URI<"did:">, Store.Schema.InferStruct<{
    root: typeof Store.Schema.Link;
}>> | import("@ucanto/interface").CapabilityMatch<"upload/list", import("@ucanto/interface").URI<"did:">, Store.Schema.InferStruct<{
    cursor: Store.Schema.Schema<string | undefined, unknown>;
    size: Store.Schema.Schema<(number & import("@ucanto/interface").Phantom<{
        typeof: "integer";
    }>) | undefined, unknown>;
    pre: Store.Schema.Schema<boolean | undefined, unknown>;
}>>>>;
export const recoverValidation: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"space/recover-validation", import("@ucanto/interface").URI<"did:">, Store.Schema.InferStruct<{
    identity: Store.Schema.Schema<import("@ucanto/interface").URI<"mailto:">, unknown>;
}>>>;
export const recover: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"space/recover", import("@ucanto/interface").URI<"did:">, Store.Schema.InferStruct<{
    identity: Store.Schema.Schema<import("@ucanto/interface").URI<"mailto:">, unknown>;
}>>>;
import * as Store from "./store.js";
//# sourceMappingURL=space.d.ts.map