export { top } from "./top.js";
/**
 * Products are identified by the CID of the DAG that describes them.
 */
export const Product: Schema.Schema<import("@ucanto/interface").URI<`${string}:`>, unknown>;
/**
 * Verifiable identity to whom voucher is issued. Currently it is a `mailto:`
 * URL.
 */
export const Identity: Schema.Schema<import("@ucanto/interface").URI<"mailto:">, unknown>;
/**
 * Services are identified using a decentralized identifier.
 */
export const Service: Schema.Schema<`did:${string}:${string}` & `did:${string}` & import("@ucanto/interface").Phantom<{
    protocol: "did:";
}>, any>;
/**
 * Capability can only be delegated (but not invoked) allowing audience to
 * derived any `voucher/` prefixed capability for the (memory) space identified
 * by did:key in the `with` field.
 *
 * Currently DID in the `with` field will always be web3.storage DID since we
 * do not support other types of vouchers yet.
 */
export const voucher: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"voucher/*", import("@ucanto/interface").URI<"did:">, any>>;
/**
 * Capability can be invoked by an agent to claim a voucher for a specific
 * user identifier (currently email address).
 *
 * The agent MAY issue claim with own DID or a DID it is delegate of. If `with`
 * is different from `iss`, it is implied that the voucher is claimed for the
 * DID in the `with` field. If `with` is same as `iss` it is implies that
 * voucher is claimed for an unspecified `did`.
 */
export const claim: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"voucher/claim", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    product: Schema.Schema<import("@ucanto/interface").URI<`${string}:`>, unknown>;
    identity: Schema.Schema<import("@ucanto/interface").URI<"mailto:">, unknown>;
    service: Schema.Schema<(`did:${string}:${string}` & `did:${string}` & import("@ucanto/interface").Phantom<{
        protocol: "did:";
    }>) | undefined, any>;
}>>>;
export const redeem: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"voucher/redeem", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    product: Schema.Schema<import("@ucanto/interface").URI<`${string}:`>, unknown>;
    identity: Schema.Schema<import("@ucanto/interface").URI<"mailto:">, unknown>;
    space: Schema.Schema<import("@ucanto/interface").URI<"did:">, unknown>;
}>>>;
import { Schema } from "@ucanto/validator/src/lib.js";
//# sourceMappingURL=voucher.d.ts.map