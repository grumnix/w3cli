/**
 * Capability can only be delegated (but not invoked) allowing audience to
 * derived any `store/` prefixed capability for the (memory) space identified
 * by did:key in the `with` field.
 */
export const store: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"store/*", import("@ucanto/interface").URI<"did:">, any>>;
/**
 * `store/add` capability allows agent to store a CAR file into a (memory) space
 * identified by did:key in the `with` field. Agent must precompute CAR locally
 * and provide it's CID and size using `nb.link` and `nb.size` fields, allowing
 * a service to provision a write location for the agent to PUT or POST desired
 * CAR into.
 */
export const add: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"store/add", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    link: typeof Link;
    size: Schema.NumberSchema<number & import("@ucanto/interface").Phantom<{
        typeof: "integer";
    }>, unknown>;
    origin: Schema.Schema<import("@ucanto/interface").Link<unknown, number, number, 0 | 1> | undefined, unknown>;
}>>>;
/**
 * Capability can be used to remove the stored CAR file from the (memory)
 * space identified by `with` field.
 */
export const remove: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"store/remove", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    link: typeof Link;
}>>>;
/**
 * Capability can be invoked to request a list of stored CAR files in the
 * (memory) space identified by `with` field.
 */
export const list: import("@ucanto/interface").TheCapabilityParser<import("@ucanto/interface").CapabilityMatch<"store/list", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    cursor: Schema.Schema<string | undefined, unknown>;
    size: Schema.Schema<(number & import("@ucanto/interface").Phantom<{
        typeof: "integer";
    }>) | undefined, unknown>;
    pre: Schema.Schema<boolean | undefined, unknown>;
}>>>;
export const all: import("@ucanto/interface").CapabilityParser<import("@ucanto/interface").CapabilityMatch<"store/add", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    link: typeof Link;
    size: Schema.NumberSchema<number & import("@ucanto/interface").Phantom<{
        typeof: "integer";
    }>, unknown>;
    origin: Schema.Schema<import("@ucanto/interface").Link<unknown, number, number, 0 | 1> | undefined, unknown>;
}>> | import("@ucanto/interface").CapabilityMatch<"store/remove", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    link: typeof Link;
}>> | import("@ucanto/interface").CapabilityMatch<"store/list", import("@ucanto/interface").URI<"did:">, Schema.InferStruct<{
    cursor: Schema.Schema<string | undefined, unknown>;
    size: Schema.Schema<(number & import("@ucanto/interface").Phantom<{
        typeof: "integer";
    }>) | undefined, unknown>;
    pre: Schema.Schema<boolean | undefined, unknown>;
}>>>;
import { Schema } from "@ucanto/validator/src/lib.js";
import { Link } from "@ucanto/validator/src/schema.js";
export { Schema, Link };
//# sourceMappingURL=store.d.ts.map